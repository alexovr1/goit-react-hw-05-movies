{"version":3,"file":"static/js/820.8f2443d1.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,GAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAE5B,IAAMC,EAAS,mCAAG,8FACPF,EAAAA,GAAAA,IAAU,qBADH,uCACyBG,MADzB,2CAAH,qDAITC,EAAS,mCAAG,WAAMC,GAAN,iFACPL,EAAAA,GAAAA,IAAA,8BAAiCK,IAD1B,uCACoCF,MADpC,2CAAH,sDAITG,EAAe,mCAAG,WAAMC,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,IADP,uCACcJ,MADd,2CAAH,sDAIfK,EAAe,mCAAG,WAAMD,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,EAApB,aADa,uCACsBJ,MADtB,2CAAH,sDAIfM,EAAe,mCAAG,WAAMF,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,EAApB,aADa,uCACsBJ,MADtB,2CAAH,qD,sFCnBfO,E,OAAaC,GAAAA,GAAH,kF,SCCVC,EAAY,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAACL,EAAD,UACKG,EAAWG,KAAI,SAAAC,GAAK,OACjB,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAMV,IAAMY,MAAO,CAAEC,KAAMN,GAAhD,SACKG,EAAMI,OAASJ,EAAMK,QAFrBL,EAAMV,GADE,KAShC,C,iHCoCD,UA/Ce,WACX,OAA0BgB,EAAAA,EAAAA,UAAS,IAAnC,eAAOlB,EAAP,KAAcmB,EAAd,KACA,GAAoCD,EAAAA,EAAAA,UAAS,MAA7C,eAAOV,EAAP,KAAmBY,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,UAKrCC,EAAAA,EAAAA,YAAU,WACN,GAAe,KAAXF,GAAsC,OAAhBA,EAA1B,CAGA,IAAMG,EAAY,mCAAG,sGAEbP,GAAa,GAFA,UAGavB,EAAAA,EAAAA,IAAU2B,GAHvB,gBAGLI,EAHK,EAGLA,QACRV,EAAcU,GAJD,uDAMbC,QAAQC,IAAR,MANa,kBAONC,MAAM,4BAPA,yBASbX,GAAa,GATA,4EAAH,qDAYlBO,GAbC,CAcJ,GAAE,CAACH,IAQJ,OACI,4BACI,kBAAMQ,SARS,SAAAC,GACnBA,EAAMC,iBAENX,EAAgB,CAAEzB,MAAOA,IACzBmB,EAAS,GACZ,EAGO,WACI,kBAAOkB,KAAK,OAAOC,MAAOtC,EAAOuC,SA/BxB,SAAAJ,GACjBhB,EAASgB,EAAMK,OAAOF,MACzB,KA8BW,mBAAQD,KAAK,SAAb,6BAEHhB,IAAa,wCACbb,IAAc,SAAC,IAAD,CAAWA,WAAYA,MAGjD,C","sources":["components/API/API_themoviedb.js","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '8733d6e7e2025f98914d10d872f02ce9' };\n\nexport const getTrends = async () => {\n    return (await axios.get('/trending/all/day')).data;\n};\n\nexport const getSearch = async query => {\n    return (await axios.get(`/search/movie?query=${query}`)).data;\n};\n\nexport const getMovieDetails = async id => {\n    return (await axios.get(`/movie/${id}`)).data;\n};\n\nexport const getMovieCredits = async id => {\n    return (await axios.get(`/movie/${id}/credits`)).data;\n};\n\nexport const getMovieReviews = async id => {\n    return (await axios.get(`/movie/${id}/reviews`)).data;\n};","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MoviesList } from './MovieList.styled';\nexport const MovieList = ({ moviesData }) => {\n    const location = useLocation();\n\n    return (\n        <MoviesList>\n            {moviesData.map(movie => (\n                <li key={movie.id}>\n                    <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                        {movie.title || movie.name}\n                    </Link>\n                </li>\n            ))}\n        </MoviesList>\n    );\n};\n\nMovieList.propTypes = {\n    moviesData: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n        })\n    ),\n};","import { getSearch } from 'components/API/API_themoviedb';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { MovieList } from './../../components/MovieList/MovieList';\n\nconst Movies = () => {\n    const [query, setQuery] = useState('');\n    const [moviesData, setMoviesData] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchQuery = searchParams.get('query');\n\n    const handleChange = event => {\n        setQuery(event.target.value);\n    };\n    useEffect(() => {\n        if (searchQuery === `` || searchQuery === null) {\n            return;\n        }\n        const fetchByQuery = async () => {\n            try {\n                setIsLoading(true);\n                const { results } = await getSearch(searchQuery);\n                setMoviesData(results);\n            } catch (error) {\n                console.log(error);\n                return alert(`Sorry, please try again`);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        fetchByQuery();\n    }, [searchQuery]);\n\n    const onHandleSubmit = event => {\n        event.preventDefault();\n\n        setSearchParams({ query: query });\n        setQuery('');\n    };\n    return (\n        <div>\n            <form onSubmit={onHandleSubmit}>\n                <input type=\"text\" value={query} onChange={handleChange} />\n                <button type=\"submit\">Search movie</button>\n            </form>\n            {isLoading && <div>...Loading</div>}\n            {moviesData && <MovieList moviesData={moviesData} />}\n        </div>\n    );\n};\n\nexport default Movies;"],"names":["axios","api_key","getTrends","data","getSearch","query","getMovieDetails","id","getMovieCredits","getMovieReviews","MoviesList","styled","MovieList","moviesData","location","useLocation","map","movie","to","state","from","title","name","useState","setQuery","setMoviesData","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","fetchByQuery","results","console","log","alert","onSubmit","event","preventDefault","type","value","onChange","target"],"sourceRoot":""}