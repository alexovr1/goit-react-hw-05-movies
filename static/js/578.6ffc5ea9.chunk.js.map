{"version":3,"file":"static/js/578.6ffc5ea9.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,GAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAE5B,IAAMC,EAAS,mCAAG,8FACPF,EAAAA,GAAAA,IAAU,qBADH,uCACyBG,MADzB,2CAAH,qDAITC,EAAS,mCAAG,WAAMC,GAAN,iFACPL,EAAAA,GAAAA,IAAA,8BAAiCK,IAD1B,uCACoCF,MADpC,2CAAH,sDAITG,EAAe,mCAAG,WAAMC,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,IADP,uCACcJ,MADd,2CAAH,sDAIfK,EAAe,mCAAG,WAAMD,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,EAApB,aADa,uCACsBJ,MADtB,2CAAH,sDAIfM,EAAe,mCAAG,WAAMF,GAAN,iFACbP,EAAAA,GAAAA,IAAA,iBAAoBO,EAApB,aADa,uCACsBJ,MADtB,2CAAH,qD,4JCnBfO,EAAYC,EAAAA,GAAAA,GAAH,mFAKTC,EAAaD,EAAAA,GAAAA,GAAH,mF,SCyCvB,EA5Ca,WACT,OAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCACZ,sGAEQH,GAAa,GAFrB,UAG+BT,EAAAA,EAAAA,IAAgBU,GAH/C,gBAGgBG,EAHhB,EAGgBA,KACRN,EAAUM,GAJlB,uDAMQC,QAAQC,IAAR,MANR,kBAOeC,MAAM,4BAPrB,yBASQP,GAAa,GATrB,6EADY,uBAAC,WAAD,wBAaZQ,EACH,GAAE,CAACP,KAGA,2BACKF,IAAa,2CACbF,GACG,SAACF,EAAD,UACKE,EAAOY,KAAI,SAAAC,GACR,IAAMC,EAAU,yCAAqCD,EAAME,cAC3D,OACI,UAACnB,EAAD,YACI,gBAAKoB,IAAKF,EAAYG,MAAM,MAAMC,IAAI,MACtC,uBAAIL,EAAMM,QACV,uCAAeN,EAAMO,eAHTP,EAAMpB,GAM7B,OAGL,oEAIf,C","sources":["components/API/API_themoviedb.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '8733d6e7e2025f98914d10d872f02ce9' };\n\nexport const getTrends = async () => {\n    return (await axios.get('/trending/all/day')).data;\n};\n\nexport const getSearch = async query => {\n    return (await axios.get(`/search/movie?query=${query}`)).data;\n};\n\nexport const getMovieDetails = async id => {\n    return (await axios.get(`/movie/${id}`)).data;\n};\n\nexport const getMovieCredits = async id => {\n    return (await axios.get(`/movie/${id}/credits`)).data;\n};\n\nexport const getMovieReviews = async id => {\n    return (await axios.get(`/movie/${id}/reviews`)).data;\n};","import styled from \"styled-components\";\n\nexport const ActorItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const ActorsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;","import { getMovieCredits } from 'components/API/API_themoviedb';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ActorItem, ActorsList } from './Cast.styled';\nconst Cast = () => {\n    const [actors, setActors] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        async function fetchCast() {\n            try {\n                setIsLoading(true);\n                const { cast } = await getMovieCredits(movieId);\n                setActors(cast);\n            } catch (error) {\n                console.log(error);\n                return alert(`Sorry, please try again`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchCast();\n    }, [movieId]);\n\n    return (\n        <div>\n            {isLoading && <div>...is Loading</div>}\n            {actors ? (\n                <ActorsList>\n                    {actors.map(actor => {\n                        const actorPhoto = `https://image.tmdb.org/t/p/w200${actor.profile_path}`;\n                        return (\n                            <ActorItem key={actor.id}>\n                                <img src={actorPhoto} width=\"100\" alt=\"\" />\n                                <p>{actor.name}</p>\n                                <p>Character: {actor.character}</p>\n                            </ActorItem>\n                        );\n                    })}\n                </ActorsList>\n            ) : (\n                <p>We don't have any cast for this movie.</p>\n            )}\n        </div>\n    );\n};\n\nexport default Cast;"],"names":["axios","api_key","getTrends","data","getSearch","query","getMovieDetails","id","getMovieCredits","getMovieReviews","ActorItem","styled","ActorsList","useState","actors","setActors","isLoading","setIsLoading","movieId","useParams","useEffect","cast","console","log","alert","fetchCast","map","actor","actorPhoto","profile_path","src","width","alt","name","character"],"sourceRoot":""}